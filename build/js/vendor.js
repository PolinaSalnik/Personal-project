(function(){function e(t,e){return function(){return t.apply(e,arguments)}}var i,t,n,a,o,r=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};function s(){}function l(){this.keys=[],this.values=[]}function u(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}function h(t){null==t&&(t={}),this.scrollCallback=e(this.scrollCallback,this),this.scrollHandler=e(this.scrollHandler,this),this.start=e(this.start,this),this.scrolled=!0,this.config=this.util().extend(t,this.defaults),this.animationNameCache=new n,this.wowEvent=this.util().createEvent(this.config.boxClass)}s.prototype.extend=function(t,e){var n,i;for(n in e)i=e[n],null==t[n]&&(t[n]=i);return t},s.prototype.isMobile=function(t){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)},s.prototype.createEvent=function(t,e,n,i){var o;return null==e&&(e=!1),null==n&&(n=!1),null==i&&(i=null),null!=document.createEvent?(o=document.createEvent("CustomEvent")).initCustomEvent(t,e,n,i):null!=document.createEventObject?(o=document.createEventObject()).eventType=t:o.eventName=t,o},s.prototype.emitEvent=function(t,e){return null!=t.dispatchEvent?t.dispatchEvent(e):e in(null!=t)?t[e]():"on"+e in(null!=t)?t["on"+e]():void 0},s.prototype.addEvent=function(t,e,n){return null!=t.addEventListener?t.addEventListener(e,n,!1):null!=t.attachEvent?t.attachEvent("on"+e,n):t[e]=n},s.prototype.removeEvent=function(t,e,n){return null!=t.removeEventListener?t.removeEventListener(e,n,!1):null!=t.detachEvent?t.detachEvent("on"+e,n):delete t[e]},s.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},t=s,n=this.WeakMap||this.MozWeakMap||(l.prototype.get=function(t){var e,n,i,o;for(e=n=0,i=(o=this.keys).length;n<i;e=++n)if(o[e]===t)return this.values[e]},l.prototype.set=function(t,e){var n,i,o,s;for(n=i=0,o=(s=this.keys).length;i<o;n=++i)if(s[n]===t)return void(this.values[n]=e);return this.keys.push(t),this.values.push(e)},l),i=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(u.notSupported=!0,u.prototype.observe=function(){},u),a=this.getComputedStyle||function(n,t){return this.getPropertyValue=function(t){var e;return"float"===t&&(t="styleFloat"),o.test(t)&&t.replace(o,function(t,e){return e.toUpperCase()}),(null!=(e=n.currentStyle)?e[t]:void 0)||null},this},o=/(\-([a-z]){1})/g,this.WOW=(h.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null},h.prototype.init=function(){var t;return this.element=window.document.documentElement,"interactive"===(t=document.readyState)||"complete"===t?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},h.prototype.start=function(){var o,t,e,n,r;if(this.stopped=!1,this.boxes=function(){var t,e,n,i;for(i=[],t=0,e=(n=this.element.querySelectorAll("."+this.config.boxClass)).length;t<e;t++)o=n[t],i.push(o);return i}.call(this),this.all=function(){var t,e,n,i;for(i=[],t=0,e=(n=this.boxes).length;t<e;t++)o=n[t],i.push(o);return i}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(t=0,e=(n=this.boxes).length;t<e;t++)o=n[t],this.applyStyle(o,!0);if(this.disabled()||(this.util().addEvent(window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new i((r=this,function(t){var e,n,o,s,i;for(i=[],e=0,n=t.length;e<n;e++)s=t[e],i.push(function(){var t,e,n,i;for(i=[],t=0,e=(n=s.addedNodes||[]).length;t<e;t++)o=n[t],i.push(this.doSync(o));return i}.call(r));return i})).observe(document.body,{childList:!0,subtree:!0})},h.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},h.prototype.sync=function(t){if(i.notSupported)return this.doSync(this.element)},h.prototype.doSync=function(t){var e,n,i,o,s;if(null==t&&(t=this.element),1===t.nodeType){for(s=[],n=0,i=(o=(t=t.parentNode||t).querySelectorAll("."+this.config.boxClass)).length;n<i;n++)e=o[n],r.call(this.all,e)<0?(this.boxes.push(e),this.all.push(e),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(e,!0),s.push(this.scrolled=!0)):s.push(void 0);return s}},h.prototype.show=function(t){return this.applyStyle(t),t.className=t.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(t),this.util().emitEvent(t,this.wowEvent),this.util().addEvent(t,"animationend",this.resetAnimation),this.util().addEvent(t,"oanimationend",this.resetAnimation),this.util().addEvent(t,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(t,"MSAnimationEnd",this.resetAnimation),t},h.prototype.applyStyle=function(t,e){var n,i,o,s;return i=t.getAttribute("data-wow-duration"),n=t.getAttribute("data-wow-delay"),o=t.getAttribute("data-wow-iteration"),this.animate((s=this,function(){return s.customStyle(t,e,i,n,o)}))},h.prototype.animate="requestAnimationFrame"in window?function(t){return window.requestAnimationFrame(t)}:function(t){return t()},h.prototype.resetStyle=function(){var t,e,n,i,o;for(o=[],e=0,n=(i=this.boxes).length;e<n;e++)t=i[e],o.push(t.style.visibility="visible");return o},h.prototype.resetAnimation=function(t){var e;if(0<=t.type.toLowerCase().indexOf("animationend"))return(e=t.target||t.srcElement).className=e.className.replace(config.animateClass,"").trim()},h.prototype.customStyle=function(t,e,n,i,o){return e&&this.cacheAnimationName(t),t.style.visibility=e?"hidden":"visible",n&&this.vendorSet(t.style,{animationDuration:n}),i&&this.vendorSet(t.style,{animationDelay:i}),o&&this.vendorSet(t.style,{animationIterationCount:o}),this.vendorSet(t.style,{animationName:e?"none":this.cachedAnimationName(t)}),t},h.prototype.vendors=["moz","webkit"],h.prototype.vendorSet=function(o,t){var s,e,r,l;for(s in e=[],t)r=t[s],o[""+s]=r,e.push(function(){var t,e,n,i;for(i=[],t=0,e=(n=this.vendors).length;t<e;t++)l=n[t],i.push(o[""+l+s.charAt(0).toUpperCase()+s.substr(1)]=r);return i}.call(this));return e},h.prototype.vendorCSS=function(t,e){var n,i,o,s,r,l;for(s=(r=a(t)).getPropertyCSSValue(e),n=0,i=(o=this.vendors).length;n<i;n++)l=o[n],s=s||r.getPropertyCSSValue("-"+l+"-"+e);return s},h.prototype.animationName=function(e){var n;try{n=this.vendorCSS(e,"animation-name").cssText}catch(t){n=a(e).getPropertyValue("animation-name")}return"none"===n?"":n},h.prototype.cacheAnimationName=function(t){return this.animationNameCache.set(t,this.animationName(t))},h.prototype.cachedAnimationName=function(t){return this.animationNameCache.get(t)},h.prototype.scrollHandler=function(){return this.scrolled=!0},h.prototype.scrollCallback=function(){var o;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){var t,e,n,i;for(i=[],t=0,e=(n=this.boxes).length;t<e;t++)(o=n[t])&&(this.isVisible(o)?this.show(o):i.push(o));return i}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},h.prototype.offsetTop=function(t){for(var e;void 0===t.offsetTop;)t=t.parentNode;for(e=t.offsetTop;t=t.offsetParent;)e+=t.offsetTop;return e},h.prototype.isVisible=function(t){var e,n,i,o,s;return n=t.getAttribute("data-wow-offset")||this.config.offset,o=(s=window.pageYOffset)+Math.min(this.element.clientHeight,this.util().innerHeight())-n,e=(i=this.offsetTop(t))+t.clientHeight,i<=o&&s<=e},h.prototype.util=function(){return null!=this._util?this._util:this._util=new t},h.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},h)}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
